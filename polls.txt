# git init
# create readme.md
# git add README.md
# git commit -m "first commit"
# git remote add origin https://github.com/amit63731/polls.git
# git push -u origin master
# create polls.txt 
# git add .
# git push -u origin master
# pip install django==1.8
# django-admin startproject mysite
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
# git add .
# git commit -m "created project polls"
# cd mysite
# python manage.py migrate
# python manage.py runserver
# http://127.0.0.1:8000/
# ctrl + c
# python manage.py startapp polls
# mysite.models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

# mysite/settings.py

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',      // this
)
# python manage.py makemigrations polls
# python manage.py sqlmigrate polls 0001
# python manage.py migrate
# polls/models.py
import datetime
from django.utils import timezone

class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

# python manage.py createsuperuser
# http://127.0.0.1:8000/admin/
# polls/admin.py

from .models import Question

admin.site.register(Question)

# http://127.0.0.1:8000/admin/
# polls.models

from django.utils.encoding import smart_unicode

    def __unicode__(self):
		return smart_unicode(self.question_text)
# polls.admin.py

class QuestionAdmin(admin.ModelAdmin):
	fields = ['pub_date', 'question_text']
	list_display = ('question_text', 'pub_date')

admin.site.register(Question, QuestionAdmin)

# polls.admin.py

class QuestionAdmin(admin.ModelAdmin):
	fields = ['pub_date', 'question_text']
	list_display = ('question_text', 'pub_date')
	list_filter = ['pub_date']                          // this


# polls.admin.py

list_display = ('question_text', 'pub_date', 'was_published_recently')

# settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],                     //this
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# cmd
(polls) C:\Users\amit\Desktop\polls\mysite>python
Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys.path = sys.path[1:]
>>> import django
>>> print(django.__path__)
['C:\\Users\\amit\\Desktop\\polls\\lib\\site-packages\\django']

# admin.py
ERRORS:
<class 'polls.admin.QuestionAdmin'>: (admin.E005) Both 'fieldsets' and 'fields' are specified.
	#fields = ['pub_date', 'question_text']
# admin.py
fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]

# admin.py

from .models import Question, Choice
admin.site.register(Choice)

# admin.py
	inlines = [ChoiceInline]  //this
	list_display = ('question_text', 'pub_date', 'was_published_recently')

# create
polls.urls
# polls.urls
from django.conf.urls import url

from . import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
]
# polls.views
from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

# mysite.urls
urlpatterns = [
    url(r'^polls/', include('polls.urls')),     //this
    url(r'^admin/', include(admin.site.urls)),
# http://localhost:8000/polls/
# polls.views
from .models import Question

def index(request):
	latest_question_list = Question.objects.order_by('pub_date')
	output = [p.question_text for p in latest_question_list]
	return HttpResponse(output)
# polls.views

    output = [p.question_text for p in latest_question_list]
	print output    // this
	return HttpResponse(output)	
# http://localhost:8000/polls/
on the console

Quit the server with CTRL-BREAK.
[u'whats is your name', u"what's up", u'third']  // making a list from a model
[20/Aug/2017 12:26:19]"GET /polls/ HTTP/1.1" 200 32

# polls/templates/polls/index.html
hello there
# polls.views
from django.shortcuts import render

def index(request):
	latest_question_list = Question.objects.order_by('pub_date')
	output = [p.question_text for p in latest_question_list]
	template  = "polls/index.html"
	context = {'latest_question_list' : latest_question_list}
	return render(request, template, context)

# http://localhost:8000/polls/
# templates/polls/index.html

{% for question in latest_question_list %}
{{question}}
{% endfor %}

# templates/polls/index.html
{% for question in latest_question_list %}
<li><a href="">{{question.question_text}}</a></li>
{% endfor %}
# templates/polls/index.html

<li><a href="/polls/{{question.id}}">{{question.question_text}}</a></li>

# templates/polls/index.html
{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

# polls.urls
urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^(?P<question_id>[0-9]+)/$', views.detail, name='detail'),  // this 
]
# polls.views 
from django.http import Http404

def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'polls/detail.html', {'question': question})

# templates/polls/detail.html
{{question}}
# polls.views
# http://localhost:8000/polls/1/
# http://localhost:8000/polls/6/
# templates/polls/index.html

   {% for question in latest_question_list %}
        <li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>  // this 
    {% endfor %}
# mysite.urls

  url(r'^polls/', include('polls.urls', namespace="polls")),

# templates/polls/index.html

  <li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>  